package machinelearninggui;

import machinelearningproject.CSVReader;
import machinelearningproject.NaiveBayes;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;


/**
 * This class operates as the model of the MVC Design pattern it stores all the data of the application and runs the
 * ML Algorithm.
 *
 * @author Jack O'Shea
 * @version 1.0
 * @since 20/03/2022
 */
public class Model
{
    //MODEL VARIABLES:
    /**
     * The name of the file which is used to load the ML Dataset.
     */
    private String filename;
    /**
     * The concept of the dataset we are testing.
     */
    private String concept;
    /**
     * The current index when iterating through the features array.
     */
    private int currentIndex = 0;
    /**
     * The array which contains the user's choices to be fed into the ML Algorithm.
     */
    protected List<String> userChoices = new ArrayList<>();


    //DATA-SCAN VARIABLES
    /**
     * Creates a Naive Bayes data analyser class.
     */
    private NaiveBayes dataScan;
    /**
     * Local features variable which stores the features of the dataset.
     */
    private List<String> features;
    /**
     * Local feature results table which stores the possible values of each feature in the dataset.
     */
    private Hashtable<String, List<String>> featuresResults;


    /**
     * Method to set the filename which is used by the controller object.
     * @param filename The name of the file to be set.
     */
    public void setFilename(String filename) {
        this.filename = filename;
        //Call to the reader to start.
        startReader();
    }

    /**
     * Method to start the fileReader with the specified filename and gather its contents.
     */
    private void startReader()
    {
        CSVReader mlFile = new CSVReader(filename);
        //Return CSV contents.
        String fileContents = mlFile.readFile();
        //Scan the data.
        dataScan = new NaiveBayes(fileContents);

        features = dataScan.getFeatures();
        featuresResults = dataScan.getFeatureResults();

    }

    /**
     * This method is used by the Controller to get the current feature.
     * @return The feature at the current Index.
     */
    public String getFeature()
    {
        return features.get(currentIndex);
    }

    /**
     * This method returns the possible answers to a given feature of the dataset.
     * @return the possible answers to the current feature.
     */
    public List<String> getChoices()
    {
        return featuresResults.get(getFeature());
    }

    /**
     * This method is used to add a new value to the user entries array.
     * @param userChoice The input from the controller object, which represents the user's input.
     */
    public void addUserChoice(String userChoice) {
        this.userChoices.add(userChoice);
    }

    /**
     * This is used to increment the value of the current index.
     */
    public void incrementCurrentIndex() {
        this.currentIndex += 1;
    }

    /**
     * Fills in the user's choices to Naive Bayes and returns the output.
     * @return the expected output generated by the Naive Bayes algorithm.
     */
    public String getResult()
    {
        //Turns the user's choices into a string array.
        String[] userChoices = this.userChoices.toArray(new String[0]);
        //Returns the expected output according to Naive Bayes
        return dataScan.generateProbability((userChoices));
    }

    /**
     * Method which checks if there is another feature in the dataset to be displayed.
     * @return a boolean true or false which states if there is another feature.
     */
    public boolean hasNextQuestion()
    {
        return currentIndex + 1 != features.size();
    }

    /**
     * Method which returns the concept of the dataset to the controller to be used by the view.
     * @return the concept of the dataset(IE. The question being asked)
     */
    public String getConcept()
    {
        return concept;
    }

    /**
     * Method which is used to set the concept depending on the inputted dataset to the controller.
     * @param concept the question being asked by the dataset.
     */
    public void setConcept(String concept) {
        this.concept = concept;
    }

    /**
     * Method which returns all the user's inputs for error checking to STD Output.
     * @return The userChoices array which contains all the user's inputted choices.
     */
    public List<String> getUserChoices() {
        return userChoices;
    }
}
